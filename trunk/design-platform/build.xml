<!-- ===========================================================================

Installing the build tools
==========================

The TouchStone build system is based on Apache Ant, which is a Java building tool
originally developed for the Jakarta Tomcat project but now used in many other
Apache projects and extended by many developers.

Ant is a little but very handy tool that uses a build file written in XML
(this file) as building instructions. For more information refer to
"http://ant.apache.org/".

The only thing that you have to make sure of is that the "JAVA_HOME" environment
property is set to match the top level directory containing the JVM you want
to use. For example:

C:\> set JAVA_HOME=C:\jdk1.4

or on Unix:

% setenv JAVA_HOME /usr/local/java
  (csh)
> JAVA_HOME=/usr/java; export JAVA_HOME
  (ksh, bash)

That's it!

Building instructions
=====================

Ok, let's build the samples. First, make sure your current working directory is
where this very file is located. Then type:

  ./build.sh all (unix)
  .\build.bat all (win32)

To build the framework, examples, and tests or:

  ./build.sh (unix)
  .\build.bat (win32)
  
To list all the possible build targets.

If everything is right (see *) and all the required packages are visible, this action
will generate some jar files:

  touchstone.jar  - This jar contains the main jar file.


in the "./build" directory. These jar files (excluding infovis.jar wich is a library) can all
be run by double clicking with the mouse on the jar file or by running the command

  java -jar <jar file name>

from within the ./build directory. Some of the jars depend on others and on files
in ./lib so the distributions file structure should not be changed without repackaging
the jars to remove these dependencies.

* On Win/98 you may get an "Out of Environment Space" error message. This happens if
Windows provides too small a space for environment variables. To work around this
limitation: 
  Close the DOS window (the error can corrupt its CLASSPATH variable). 
  Open a new DOS window. Click on the MS-DOS icon at the top left of the window. 
  Select the Properties option. 
  Click on the Memory tab. 
  Adjust the "Initial Environment" drop-down box from "Auto" to "2816". 
  Click OK. 
Then try building.

-->

<project name="touchstone" default="usage" basedir=".">

 <!-- =================================================================== -->
 <!-- Initialization target                                               -->
 <!-- =================================================================== -->
 <target name="init">
  <tstamp/>
  <property name="Name" value="TouchStone-Design"/>
  <property name="name" value="touchstone-design"/>
  <property name="version" value="0.2alpha"/>
  <property name="year" value="2011"/>

  <echo message="----------- ${Name} ${version} [${year}] ------------"/>

  <property name="build.compiler" value="modern"/>
 <!-- <property name="debug" value="off"/>-->
  <property name="debug" value="on"/>
  <property name="optimize" value="on"/>
  <property name="deprecation" value="on"/>
  <property name="packages" value="fr.inria.insitu.touchstone.design.*"/>

  <!-- Define the source directories -->
  <property name="root.dir" value="."/>
  <property name="help.dir" value="${root.dir}/help"/>
  <property name="lib.dir" value="${root.dir}/lib"/>
  <property name="src.dir" value="${root.dir}/src"/>

  <!-- Define the source build directories -->
  <property name="build.dir" value="${root.dir}/build"/>
  <property name="build.lib" value="${root.dir}/build/lib"/>
  <property name="build.help" value="${root.dir}/build/help"/>
  <property name="build.touchstone.src" value="${root.dir}/build/design-platform/src"/>
  <property name="build.touchstone.dest" value="${root.dir}/build/design-platform/classes"/>

  <!-- Define the distribution directories -->
  <property name="dist.root" value="${root.dir}/dist"/>
  <property name="sourcedist.dir" value="${dist.root}/${name}-${version}/${name}"/>

  <path id="build-classpath">
  	<fileset dir="${build.lib}">
  		<include name="*.jar"/>
  	</fileset>
<!--	<pathelement location="${build.dir}/${name}.jar"/> -->
  </path>

   <path id="run-classpath">
     <fileset dir="${lib.dir}">
       <include name="*.jar"/>
     </fileset>      	
  </path>

 </target>

 <!-- =================================================================== -->
 <!-- Help on usage                                                       -->
 <!-- =================================================================== -->
 <target name="usage">
  <echo message=""/>
  <echo message=""/>
  <echo message="TouchStone Build file"/>
  <echo message="-------------------------------------------------------------"/>
  <echo message=""/>
  <echo message=" available targets are:"/>
  <echo message=""/>
  <echo message="   all        --> builds all the jars in ./build"/>
  <echo message="   touchstone    --> builds the touchstone.jar file in ./build"/>
  <echo message="   zip --> creates the compiled distribution in ./dist"/>
  <echo message="   sourcedist --> creates the source distribution in ./dist"/>    
  <echo message="   clean      --> restores distribution to original state"/>
  <echo message="   usage      --> (default) displays build menu"/>
  <echo message=""/>
  <echo message=" See the comments inside the build.xml file for more details."/>
  <echo message="-------------------------------------------------------------"/>
  <echo message=""/>
  <echo message=""/>
 </target>

 <!-- =================================================================== -->
 <!-- Prepares the build directory                                        -->
 <!-- =================================================================== -->
 <target name="prepare" depends="init">
  <mkdir dir="${build.dir}"/>
  <mkdir dir="${build.lib}"/>
  <mkdir dir="${build.help}"/>
  
  <copy todir="${build.lib}">
   <fileset dir="${lib.dir}"/>
  </copy>
  <copy todir="${build.help}">
   <fileset dir="${help.dir}"/>
  </copy>
  <copy todir="${build.dir}">
   <fileset dir="${root.dir}">
    <include name="core.xml"/>
    <include name="build.bat"/>
    <include name="build.sh"/>
   </fileset>
  </copy>
 </target>
 
 <!-- =================================================================== -->
 <!-- Prepares the touchstone source code                                    -->
 <!-- =================================================================== -->
 <target name="prepare-touchstone" depends="prepare">
  <mkdir dir="${build.touchstone.src}"/>
  <mkdir dir="${build.touchstone.dest}"/>
  
  <copy todir="${build.touchstone.src}">
   <fileset dir="${src.dir}"/>
  </copy>
 	
 	<pathconvert pathsep=" " property="build.manifest.classpath" dirsep="/">
 		<path refid="build-classpath"/>
 		<chainedmapper>
 		  <flattenmapper />
 		  <globmapper from="*" to="lib/*"/>
   		</chainedmapper>
 	</pathconvert>
 	<manifest file="${build.touchstone.src}/touchstone.mf">
		<attribute name="Built-By" value="${user.name}"/>
		<attribute name="Main-Class" value="fr.inria.insitu.touchstone.design.graphic.DesignPlatform"/>
		<attribute name="Class-Path" value="${build.manifest.classpath}"/>
		<attribute name="Created-By" value="Caroline Appert and Jean-Daniel Fekete"/>
		<section name="common">
			<attribute name="Implementation-Title" value="TOUCHSTONE"/>
			<attribute name="Implementation-Version" value="${version} ${TODAY}"/> 
			<attribute name="Implementation-Vendor" value="INRIA Saclay, France"/>
			<attribute name="Implementation-URL" value="http://code.google.com/p/touchstone"/>
		</section>
	</manifest>
 </target>

 <!-- =================================================================== -->
 <!-- Compiles the TouchStone source code                                 -->
 <!-- =================================================================== -->
 <target name="compile-touchstone" depends="prepare-touchstone">
  <!-- copy resource files -->
  <copy todir="${build.touchstone.dest}">
   <fileset dir="${build.touchstone.src}" excludes="**/*.java"/>
  </copy>
  <!-- <echo>${build.manifest.classpath}</echo> -->
  <javac srcdir="${build.touchstone.src}"
   source="1.5"
   destdir="${build.touchstone.dest}"
   debug="${debug}"
   deprecation="${deprecation}"
   optimize="${optimize}"
   classpathref="run-classpath">
	<!--  	<compilerarg value="-Xlint:unchecked"/> -->
 </javac>
 </target>

 <!-- =================================================================== -->
 <!-- Creates the touchstone.jar in ./build                                  -->
 <!-- =================================================================== -->
 <target name="touchstone" depends="compile-touchstone">
   <jar jarfile="${build.dir}/${name}.jar"
	manifest="${build.touchstone.src}/touchstone.mf">
     <fileset dir="${build.touchstone.dest}"/>
   </jar>
 </target>
	
 <target name="run" depends="touchstone">
   <java 
       jar="${build.dir}/${name}.jar"
       fork="true"/>
 </target>

 <!-- =================================================================== -->
 <!-- Build all jars in ./build                                           -->
 <!-- =================================================================== -->
 <target name="all" depends="touchstone"/>


 <!-- =================================================================== -->
 <!-- Build source distribution in ./dist                                 -->
 <!-- =================================================================== -->
 <target name="sourcedist" depends="clean">
  <mkdir dir="${dist.root}"/>
  <mkdir dir="${sourcedist.dir}"/>

  <copy todir="${sourcedist.dir}">
   <fileset dir="${root.dir}">
    <include name="data/**"/>
    <include name="src/**"/>
    <include name="lib/**"/>
    <include name="tools/**"/>
    <include name="scripts/**"/>
    <include name="build.xml"/>
    <include name="build.bat"/>
    <include name="build.sh"/>
   </fileset>
  </copy>

  <fixcrlf srcdir="${sourcedist.dir}"
   eol="lf" eof="remove"
   includes="**/*.sh"
   />
  <zip zipfile="${dist.root}/${name}-${version}.zip"
   basedir="${dist.root}/${name}-${version}"
   whenempty="create"/>
 </target>

 <!-- =================================================================== -->
 <!-- Build compiled distribution in ./dist                               -->
 <!-- =================================================================== -->
 <target name="zip" depends="clean, all">
  <mkdir dir="${dist.root}"/>
  <mkdir dir="${sourcedist.dir}"/>

  <copy todir="${sourcedist.dir}">
   <fileset dir="${root.dir}">
    <exclude name="dist/**"/>
    <!--
    <exclude name="src/**"/>
    -->
   	<exclude name="class/**"/>
   	
   	<exclude name="build/**"/>
   	
   	<!--
    <exclude name="data/**"/>
    <exclude name="lib/**"/>
    -->
    <exclude name="examples/**"/>
    <exclude name="tests/**"/>
   </fileset>
  </copy>
  <copy todir="${sourcedist.dir}">
    <fileset dir="${root.dir}/build">
	  	<include name="*.jar"/>
  	</fileset>
  </copy>

  <fixcrlf srcdir="${sourcedist.dir}"
   eol="lf" eof="remove"
   includes="**/*.sh"
   />

  <zip zipfile="${dist.root}/${name}-${version}.zip"
   basedir="${dist.root}/${name}-${version}"
   whenempty="create"
   />
 </target>

 <!-- =================================================================== -->
 <!-- Clean restors distribution to original state                        -->
 <!-- =================================================================== -->
 <target name="clean" depends="init">
  <delete dir="${build.dir}"/>
  <delete dir="${dist.root}"/>
 </target>
</project>
